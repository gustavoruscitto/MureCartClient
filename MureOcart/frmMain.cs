/*
 * ++++++++++++++++++++++++++++++++++++++++++++++++++
 * This code is generated by a tool and is provided "as is", without warranty of any kind,
 * express or implied, including but not limited to the warranties of merchantability,
 * fitness for a particular purpose and non-infringement.
 * In no event shall the authors or copyright holders be liable for any claim, damages or
 * other liability, whether in an action of contract, tort or otherwise, arising from,
 * out of or in connection with the software or the use or other dealings in the software.
 * ++++++++++++++++++++++++++++++++++++++++++++++++++
 * */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MureOcart
{
    public partial class frmMain : Form
    {
        public frmMain()
        {
            InitializeComponent();
        }


        private void frmoc_categoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_category f = new frmoc_category();
          f.Show();
        }

        private void frmoc_category_descriptionToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_category_description f = new frmoc_category_description();
          f.Show();
        }

        private void frmoc_category_pathToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_category_path f = new frmoc_category_path();
          f.Show();
        }

        private void frmoc_category_to_storeToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_category_to_store f = new frmoc_category_to_store();
          f.Show();
        }

        private void frmoc_orderToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_order f = new frmoc_order();
          f.Show();
        }

        private void frmoc_order_historyToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_order_history f = new frmoc_order_history();
          f.Show();
        }

        private void frmoc_order_productToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_order_product f = new frmoc_order_product();
          f.Show();
        }

        private void frmoc_order_totalToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_order_total f = new frmoc_order_total();
          f.Show();
        }

        private void frmoc_productToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_product f = new frmoc_product();
          f.Show();
        }

        private void frmoc_product_descriptionToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_product_description f = new frmoc_product_description();
          f.Show();
        }

        private void frmoc_product_specialToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_product_special f = new frmoc_product_special();
          f.Show();
        }

        private void frmoc_product_to_categoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_product_to_category f = new frmoc_product_to_category();
          f.Show();
        }

        private void frmoc_product_to_storeToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_product_to_store f = new frmoc_product_to_store();
          f.Show();
        }

        private void frmoc_url_aliasToolStripMenuItem_Click(object sender, EventArgs e)
        {
          frmoc_url_alias f = new frmoc_url_alias();
          f.Show();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            var model = new Model1Entities();
            try
            {
                var prodid = int.Parse(textBox1.Text);
                var stock = int.Parse(textBox2.Text);
                model.SetStock(prodid,stock);
                MessageBox.Show("Hecho");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }

        }

        private void button2_Click(object sender, EventArgs e)
        {
            var model = new Model1Entities();
            try
            {
                var prodid = int.Parse(agpc_idprod.Text);
                var categid = int.Parse(agpc_idcateg.Text);
                model.AgregarProdCateg(prodid, categid);
                MessageBox.Show("Hecho");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

        private void agregarCateg_Click(object sender, EventArgs e)
        {
            var model = new Model1Entities();
            try
            {
                var categid = int.Parse(agc_idcateg.Text);
                var categidpadre = int.Parse(agc_idcategpadre.Text);

                model.AgregarCategoria(categid, categidpadre, agc_nombre.Text, agc_desc.Text,
                    agc_metadesc.Text, agc_metakeys.Text, agc_imagen.Text);
                MessageBox.Show("Hecho");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

        private void agregarImagenProd_Click(object sender, EventArgs e)
        {
            var model = new Model1Entities();
            try
            {
                var prodid = int.Parse(agip_idprod.Text);
                var orden = int.Parse(agip_orden.Text);
                model.AgregarImagenProd(prodid, agip_imagen.Text, orden);
                MessageBox.Show("Hecho");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

        private void actualizarOrden_Click(object sender, EventArgs e)
        {
            var model = new Model1Entities();
            try
            {
                var orderid = int.Parse(ao_orderId.Text);
                var status = int.Parse(ao_status.Text);
                model.ActualizarOrden(orderid, status, ao_comentario.Text);
                MessageBox.Show("Hecho");
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

        private void agregarProductos_Click(object sender, EventArgs e)
        {
            var model = new Model1Entities(); 
            string file = openFileDialog1.FileName;
            try
            {
                string text = File.ReadAllText(file);
                var lineas = text.Split('\n');
                foreach (var linea in lineas.Skip(1))
                {
                    var campos = csvParser(linea);
                    var x = campos;
                    model.AgregarProducto(campos.ToArray());
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }

        }

        private IEnumerable<string> csvParser(string csv, char separator = ',')
        {
            var fields = csv.Split(separator);
            return fields.Select(x => x.Trim().Replace("\"","")).ToArray();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            openFileDialog1.Filter = "archivos csv (*.csv)|*.csv";
            openFileDialog1.FileName = "";
            openFileDialog1.InitialDirectory = System.AppDomain.CurrentDomain.BaseDirectory;
            DialogResult result = openFileDialog1.ShowDialog();
            
            if (result == DialogResult.OK) // Test result.
            {
                agregarProductos.Enabled = true;
                ap_archivo.Text = openFileDialog1.FileName;
            }
            else
                agregarProductos.Enabled = false;

        }
    }
}
