/*
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* This code is generated by a tool and is provided "as is", without warranty of any kind,
* express or implied, including but not limited to the warranties of merchantability,
* fitness for a particular purpose and non-infringement.
* In no event shall the authors or copyright holders be liable for any claim, damages or
* other liability, whether in an action of contract, tort or otherwise, arising from,
* out of or in connection with the software or the use or other dealings in the software.
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity;

namespace MureOcart
{
	public partial class frmoc_category : Form
	{
		private Model1Entities ctx;
		
		public frmoc_category()
		{
			InitializeComponent();
		}
		
		private void frmoc_category_Load(object sender, EventArgs e)
		{
			ctx = new Model1Entities();
		    try
		    {
		        ctx.oc_category.Load();
		    }
		    catch (Exception ex)
		    {
		        var x = ex;
		    }
		    BindingList<oc_category> _entities = ctx.oc_category.Local.ToBindingList();
			oc_categoryBindingSource.DataSource = _entities;
			this.category_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "category_id", true ));
			this.imageTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "image", true ));
			this.parent_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "parent_id", true ));
			this.topCheckBox.DataBindings.Add(new System.Windows.Forms.Binding("Checked", this.oc_categoryBindingSource, "top", true));
			this.columnTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "column", true ));
			this.sort_orderTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "sort_order", true ));
			this.statusCheckBox.DataBindings.Add(new System.Windows.Forms.Binding("Checked", this.oc_categoryBindingSource, "status", true));
			this.date_added_dateTimePicker.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "date_added", true ));
			this.date_modified_dateTimePicker.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_categoryBindingSource, "date_modified", true ));
			
		}
		
		private void Save_Click(object sender, EventArgs e)
		{
			if (!this.Validate()) return;
			oc_categoryBindingSource.EndEdit();
			ctx.SaveChanges();
			
		}
		
		private void frmoc_category_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = false;
		}
		
		private void category_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( category_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( category_idTextBox, "The field category_id is required" ); 
			}
			int v;
			string s = category_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( category_idTextBox, "The field category_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( category_idTextBox, "" ); } 
		}
		
		private void imageTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( imageTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( imageTextBox, "The field image is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( imageTextBox, "" ); } 
		}
		
		private void parent_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( parent_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( parent_idTextBox, "The field parent_id is required" ); 
			}
			int v;
			string s = parent_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( parent_idTextBox, "The field parent_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( parent_idTextBox, "" ); } 
		}
		
		private void columnTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( columnTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( columnTextBox, "The field column is required" ); 
			}
			int v;
			string s = columnTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( columnTextBox, "The field column must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( columnTextBox, "" ); } 
		}
		
		private void sort_orderTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( sort_orderTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( sort_orderTextBox, "The field sort_order is required" ); 
			}
			int v;
			string s = sort_orderTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( sort_orderTextBox, "The field sort_order must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( sort_orderTextBox, "" ); } 
		}
		
		
		
		
		private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
		{
			oc_categoryBindingSource.AddNew();
		}
	}
}
