/*
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* This code is generated by a tool and is provided "as is", without warranty of any kind,
* express or implied, including but not limited to the warranties of merchantability,
* fitness for a particular purpose and non-infringement.
* In no event shall the authors or copyright holders be liable for any claim, damages or
* other liability, whether in an action of contract, tort or otherwise, arising from,
* out of or in connection with the software or the use or other dealings in the software.
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity;

namespace MureOcart
{
	public partial class frmoc_order_history : Form
	{
		private Model1Entities ctx;
		
		public frmoc_order_history()
		{
			InitializeComponent();
		}
		
		private void frmoc_order_history_Load(object sender, EventArgs e)
		{
			ctx = new Model1Entities();
			ctx.oc_order_history.Load();
			BindingList<oc_order_history> _entities = ctx.oc_order_history.Local.ToBindingList();
			oc_order_historyBindingSource.DataSource = _entities;
			this.order_history_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_historyBindingSource, "order_history_id", true ));
			this.order_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_historyBindingSource, "order_id", true ));
			this.order_status_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_historyBindingSource, "order_status_id", true ));
			this.notifyCheckBox.DataBindings.Add(new System.Windows.Forms.Binding("Checked", this.oc_order_historyBindingSource, "notify", true));
			this.commentTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_historyBindingSource, "comment", true ));
			this.date_added_dateTimePicker.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_historyBindingSource, "date_added", true ));
			
		}
		
		private void Save_Click(object sender, EventArgs e)
		{
			if (!this.Validate()) return;
			oc_order_historyBindingSource.EndEdit();
			ctx.SaveChanges();
			
		}
		
		private void frmoc_order_history_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = false;
		}
		
		private void order_history_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_history_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_history_idTextBox, "The field order_history_id is required" ); 
			}
			int v;
			string s = order_history_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_history_idTextBox, "The field order_history_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_history_idTextBox, "" ); } 
		}
		
		private void order_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_idTextBox, "The field order_id is required" ); 
			}
			int v;
			string s = order_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_idTextBox, "The field order_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_idTextBox, "" ); } 
		}
		
		private void order_status_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_status_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_status_idTextBox, "The field order_status_id is required" ); 
			}
			int v;
			string s = order_status_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_status_idTextBox, "The field order_status_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_status_idTextBox, "" ); } 
		}
		
		private void commentTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( commentTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( commentTextBox, "The field comment is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( commentTextBox, "" ); } 
		}
		
		
		
		
		private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
		{
			oc_order_historyBindingSource.AddNew();
		}
	}
}
