/*
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* This code is generated by a tool and is provided "as is", without warranty of any kind,
* express or implied, including but not limited to the warranties of merchantability,
* fitness for a particular purpose and non-infringement.
* In no event shall the authors or copyright holders be liable for any claim, damages or
* other liability, whether in an action of contract, tort or otherwise, arising from,
* out of or in connection with the software or the use or other dealings in the software.
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity;

namespace MureOcart
{
	public partial class frmoc_order_product : Form
	{
		private Model1Entities ctx;
		
		public frmoc_order_product()
		{
			InitializeComponent();
		}
		
		private void frmoc_order_product_Load(object sender, EventArgs e)
		{
			ctx = new Model1Entities();
			ctx.oc_order_product.Load();
			BindingList<oc_order_product> _entities = ctx.oc_order_product.Local.ToBindingList();
			oc_order_productBindingSource.DataSource = _entities;
			this.order_product_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "order_product_id", true ));
			this.order_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "order_id", true ));
			this.product_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "product_id", true ));
			this.nameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "name", true ));
			this.modelTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "model", true ));
			this.quantityTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "quantity", true ));
			this.priceTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "price", true ));
			this.totalTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "total", true ));
			this.taxTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "tax", true ));
			this.rewardTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_order_productBindingSource, "reward", true ));
			
		}
		
		private void Save_Click(object sender, EventArgs e)
		{
			if (!this.Validate()) return;
			oc_order_productBindingSource.EndEdit();
			ctx.SaveChanges();
			
		}
		
		private void frmoc_order_product_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = false;
		}
		
		private void order_product_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_product_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_product_idTextBox, "The field order_product_id is required" ); 
			}
			int v;
			string s = order_product_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_product_idTextBox, "The field order_product_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_product_idTextBox, "" ); } 
		}
		
		private void order_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_idTextBox, "The field order_id is required" ); 
			}
			int v;
			string s = order_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_idTextBox, "The field order_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_idTextBox, "" ); } 
		}
		
		private void product_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( product_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( product_idTextBox, "The field product_id is required" ); 
			}
			int v;
			string s = product_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( product_idTextBox, "The field product_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( product_idTextBox, "" ); } 
		}
		
		private void nameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( nameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( nameTextBox, "The field name is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( nameTextBox, "" ); } 
		}
		
		private void modelTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( modelTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( modelTextBox, "The field model is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( modelTextBox, "" ); } 
		}
		
		private void quantityTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( quantityTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( quantityTextBox, "The field quantity is required" ); 
			}
			int v;
			string s = quantityTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( quantityTextBox, "The field quantity must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( quantityTextBox, "" ); } 
		}
		
		private void priceTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( priceTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( priceTextBox, "The field price is required" ); 
			}
			double v;
			string s = priceTextBox.Text;
			if( !double.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( priceTextBox, "The field price must be double." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( priceTextBox, "" ); } 
		}
		
		private void totalTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( totalTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( totalTextBox, "The field total is required" ); 
			}
			double v;
			string s = totalTextBox.Text;
			if( !double.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( totalTextBox, "The field total must be double." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( totalTextBox, "" ); } 
		}
		
		private void taxTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( taxTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( taxTextBox, "The field tax is required" ); 
			}
			double v;
			string s = taxTextBox.Text;
			if( !double.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( taxTextBox, "The field tax must be double." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( taxTextBox, "" ); } 
		}
		
		private void rewardTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( rewardTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( rewardTextBox, "The field reward is required" ); 
			}
			int v;
			string s = rewardTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( rewardTextBox, "The field reward must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( rewardTextBox, "" ); } 
		}
		
		
		
		
		private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
		{
			oc_order_productBindingSource.AddNew();
		}
	}
}
