/*
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* This code is generated by a tool and is provided "as is", without warranty of any kind,
* express or implied, including but not limited to the warranties of merchantability,
* fitness for a particular purpose and non-infringement.
* In no event shall the authors or copyright holders be liable for any claim, damages or
* other liability, whether in an action of contract, tort or otherwise, arising from,
* out of or in connection with the software or the use or other dealings in the software.
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity;

namespace MureOcart
{
	public partial class frmoc_order : Form
	{
		private Model1Entities ctx;
		
		public frmoc_order()
		{
			InitializeComponent();
		}
		
		private void frmoc_order_Load(object sender, EventArgs e)
		{
			ctx = new Model1Entities();
			ctx.oc_order.Load();
			BindingList<oc_order> _entities = ctx.oc_order.Local.ToBindingList();
			oc_orderBindingSource.DataSource = _entities;
			this.order_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "order_id", true ));
			this.invoice_noTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "invoice_no", true ));
			this.invoice_prefixTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "invoice_prefix", true ));
			this.store_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "store_id", true ));
			this.store_nameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "store_name", true ));
			this.store_urlTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "store_url", true ));
			this.customer_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "customer_id", true ));
			this.customer_group_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "customer_group_id", true ));
			this.firstnameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "firstname", true ));
			this.lastnameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "lastname", true ));
			this.emailTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "email", true ));
			this.telephoneTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "telephone", true ));
			this.faxTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "fax", true ));
			this.payment_firstnameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_firstname", true ));
			this.payment_lastnameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_lastname", true ));
			this.payment_companyTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_company", true ));
			this.payment_company_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_company_id", true ));
			this.payment_tax_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_tax_id", true ));
			this.payment_address_1TextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_address_1", true ));
			this.payment_address_2TextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_address_2", true ));
			this.payment_cityTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_city", true ));
			this.payment_postcodeTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_postcode", true ));
			this.payment_countryTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_country", true ));
			this.payment_country_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_country_id", true ));
			this.payment_zoneTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_zone", true ));
			this.payment_zone_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_zone_id", true ));
			this.payment_address_formatTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_address_format", true ));
			this.payment_methodTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_method", true ));
			this.payment_codeTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "payment_code", true ));
			this.shipping_firstnameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_firstname", true ));
			this.shipping_lastnameTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_lastname", true ));
			this.shipping_companyTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_company", true ));
			this.shipping_address_1TextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_address_1", true ));
			this.shipping_address_2TextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_address_2", true ));
			this.shipping_cityTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_city", true ));
			this.shipping_postcodeTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_postcode", true ));
			this.shipping_countryTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_country", true ));
			this.shipping_country_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_country_id", true ));
			this.shipping_zoneTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_zone", true ));
			this.shipping_zone_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_zone_id", true ));
			this.shipping_address_formatTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_address_format", true ));
			this.shipping_methodTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_method", true ));
			this.shipping_codeTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "shipping_code", true ));
			this.commentTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "comment", true ));
			this.totalTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "total", true ));
			this.order_status_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "order_status_id", true ));
			this.affiliate_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "affiliate_id", true ));
			this.commissionTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "commission", true ));
			this.language_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "language_id", true ));
			this.currency_idTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "currency_id", true ));
			this.currency_codeTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "currency_code", true ));
			this.currency_valueTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "currency_value", true ));
			this.ipTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "ip", true ));
			this.forwarded_ipTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "forwarded_ip", true ));
			this.user_agentTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "user_agent", true ));
			this.accept_languageTextBox.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "accept_language", true ));
			this.date_added_dateTimePicker.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "date_added", true ));
			this.date_modified_dateTimePicker.DataBindings.Add(new System.Windows.Forms.Binding("Text", this.oc_orderBindingSource, "date_modified", true ));
			
		}
		
		private void Save_Click(object sender, EventArgs e)
		{
			if (!this.Validate()) return;
			oc_orderBindingSource.EndEdit();
			ctx.SaveChanges();
			
		}
		
		private void frmoc_order_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = false;
		}
		
		private void order_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_idTextBox, "The field order_id is required" ); 
			}
			int v;
			string s = order_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_idTextBox, "The field order_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_idTextBox, "" ); } 
		}
		
		private void invoice_noTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( invoice_noTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( invoice_noTextBox, "The field invoice_no is required" ); 
			}
			int v;
			string s = invoice_noTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( invoice_noTextBox, "The field invoice_no must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( invoice_noTextBox, "" ); } 
		}
		
		private void invoice_prefixTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( invoice_prefixTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( invoice_prefixTextBox, "The field invoice_prefix is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( invoice_prefixTextBox, "" ); } 
		}
		
		private void store_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( store_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( store_idTextBox, "The field store_id is required" ); 
			}
			int v;
			string s = store_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( store_idTextBox, "The field store_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( store_idTextBox, "" ); } 
		}
		
		private void store_nameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( store_nameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( store_nameTextBox, "The field store_name is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( store_nameTextBox, "" ); } 
		}
		
		private void store_urlTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( store_urlTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( store_urlTextBox, "The field store_url is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( store_urlTextBox, "" ); } 
		}
		
		private void customer_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( customer_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( customer_idTextBox, "The field customer_id is required" ); 
			}
			int v;
			string s = customer_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( customer_idTextBox, "The field customer_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( customer_idTextBox, "" ); } 
		}
		
		private void customer_group_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( customer_group_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( customer_group_idTextBox, "The field customer_group_id is required" ); 
			}
			int v;
			string s = customer_group_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( customer_group_idTextBox, "The field customer_group_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( customer_group_idTextBox, "" ); } 
		}
		
		private void firstnameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( firstnameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( firstnameTextBox, "The field firstname is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( firstnameTextBox, "" ); } 
		}
		
		private void lastnameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( lastnameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( lastnameTextBox, "The field lastname is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( lastnameTextBox, "" ); } 
		}
		
		private void emailTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( emailTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( emailTextBox, "The field email is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( emailTextBox, "" ); } 
		}
		
		private void telephoneTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( telephoneTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( telephoneTextBox, "The field telephone is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( telephoneTextBox, "" ); } 
		}
		
		private void faxTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( faxTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( faxTextBox, "The field fax is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( faxTextBox, "" ); } 
		}
		
		private void payment_firstnameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_firstnameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_firstnameTextBox, "The field payment_firstname is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_firstnameTextBox, "" ); } 
		}
		
		private void payment_lastnameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_lastnameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_lastnameTextBox, "The field payment_lastname is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_lastnameTextBox, "" ); } 
		}
		
		private void payment_companyTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_companyTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_companyTextBox, "The field payment_company is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_companyTextBox, "" ); } 
		}
		
		private void payment_company_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_company_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_company_idTextBox, "The field payment_company_id is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_company_idTextBox, "" ); } 
		}
		
		private void payment_tax_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_tax_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_tax_idTextBox, "The field payment_tax_id is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_tax_idTextBox, "" ); } 
		}
		
		private void payment_address_1TextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_address_1TextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_address_1TextBox, "The field payment_address_1 is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_address_1TextBox, "" ); } 
		}
		
		private void payment_address_2TextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_address_2TextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_address_2TextBox, "The field payment_address_2 is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_address_2TextBox, "" ); } 
		}
		
		private void payment_cityTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_cityTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_cityTextBox, "The field payment_city is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_cityTextBox, "" ); } 
		}
		
		private void payment_postcodeTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_postcodeTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_postcodeTextBox, "The field payment_postcode is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_postcodeTextBox, "" ); } 
		}
		
		private void payment_countryTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_countryTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_countryTextBox, "The field payment_country is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_countryTextBox, "" ); } 
		}
		
		private void payment_country_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_country_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_country_idTextBox, "The field payment_country_id is required" ); 
			}
			int v;
			string s = payment_country_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_country_idTextBox, "The field payment_country_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_country_idTextBox, "" ); } 
		}
		
		private void payment_zoneTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_zoneTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_zoneTextBox, "The field payment_zone is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_zoneTextBox, "" ); } 
		}
		
		private void payment_zone_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_zone_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_zone_idTextBox, "The field payment_zone_id is required" ); 
			}
			int v;
			string s = payment_zone_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_zone_idTextBox, "The field payment_zone_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_zone_idTextBox, "" ); } 
		}
		
		private void payment_address_formatTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_address_formatTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_address_formatTextBox, "The field payment_address_format is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_address_formatTextBox, "" ); } 
		}
		
		private void payment_methodTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_methodTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_methodTextBox, "The field payment_method is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_methodTextBox, "" ); } 
		}
		
		private void payment_codeTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( payment_codeTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( payment_codeTextBox, "The field payment_code is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( payment_codeTextBox, "" ); } 
		}
		
		private void shipping_firstnameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_firstnameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_firstnameTextBox, "The field shipping_firstname is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_firstnameTextBox, "" ); } 
		}
		
		private void shipping_lastnameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_lastnameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_lastnameTextBox, "The field shipping_lastname is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_lastnameTextBox, "" ); } 
		}
		
		private void shipping_companyTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_companyTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_companyTextBox, "The field shipping_company is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_companyTextBox, "" ); } 
		}
		
		private void shipping_address_1TextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_address_1TextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_address_1TextBox, "The field shipping_address_1 is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_address_1TextBox, "" ); } 
		}
		
		private void shipping_address_2TextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_address_2TextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_address_2TextBox, "The field shipping_address_2 is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_address_2TextBox, "" ); } 
		}
		
		private void shipping_cityTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_cityTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_cityTextBox, "The field shipping_city is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_cityTextBox, "" ); } 
		}
		
		private void shipping_postcodeTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_postcodeTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_postcodeTextBox, "The field shipping_postcode is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_postcodeTextBox, "" ); } 
		}
		
		private void shipping_countryTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_countryTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_countryTextBox, "The field shipping_country is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_countryTextBox, "" ); } 
		}
		
		private void shipping_country_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_country_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_country_idTextBox, "The field shipping_country_id is required" ); 
			}
			int v;
			string s = shipping_country_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_country_idTextBox, "The field shipping_country_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_country_idTextBox, "" ); } 
		}
		
		private void shipping_zoneTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_zoneTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_zoneTextBox, "The field shipping_zone is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_zoneTextBox, "" ); } 
		}
		
		private void shipping_zone_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_zone_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_zone_idTextBox, "The field shipping_zone_id is required" ); 
			}
			int v;
			string s = shipping_zone_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_zone_idTextBox, "The field shipping_zone_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_zone_idTextBox, "" ); } 
		}
		
		private void shipping_address_formatTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_address_formatTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_address_formatTextBox, "The field shipping_address_format is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_address_formatTextBox, "" ); } 
		}
		
		private void shipping_methodTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_methodTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_methodTextBox, "The field shipping_method is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_methodTextBox, "" ); } 
		}
		
		private void shipping_codeTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( shipping_codeTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( shipping_codeTextBox, "The field shipping_code is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( shipping_codeTextBox, "" ); } 
		}
		
		private void commentTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( commentTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( commentTextBox, "The field comment is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( commentTextBox, "" ); } 
		}
		
		private void totalTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( totalTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( totalTextBox, "The field total is required" ); 
			}
			double v;
			string s = totalTextBox.Text;
			if( !double.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( totalTextBox, "The field total must be double." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( totalTextBox, "" ); } 
		}
		
		private void order_status_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( order_status_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_status_idTextBox, "The field order_status_id is required" ); 
			}
			int v;
			string s = order_status_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( order_status_idTextBox, "The field order_status_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( order_status_idTextBox, "" ); } 
		}
		
		private void affiliate_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( affiliate_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( affiliate_idTextBox, "The field affiliate_id is required" ); 
			}
			int v;
			string s = affiliate_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( affiliate_idTextBox, "The field affiliate_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( affiliate_idTextBox, "" ); } 
		}
		
		private void commissionTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( commissionTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( commissionTextBox, "The field commission is required" ); 
			}
			double v;
			string s = commissionTextBox.Text;
			if( !double.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( commissionTextBox, "The field commission must be double." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( commissionTextBox, "" ); } 
		}
		
		private void language_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( language_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( language_idTextBox, "The field language_id is required" ); 
			}
			int v;
			string s = language_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( language_idTextBox, "The field language_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( language_idTextBox, "" ); } 
		}
		
		private void currency_idTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( currency_idTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( currency_idTextBox, "The field currency_id is required" ); 
			}
			int v;
			string s = currency_idTextBox.Text;
			if( !int.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( currency_idTextBox, "The field currency_id must be int." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( currency_idTextBox, "" ); } 
		}
		
		private void currency_codeTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( currency_codeTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( currency_codeTextBox, "The field currency_code is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( currency_codeTextBox, "" ); } 
		}
		
		private void currency_valueTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( currency_valueTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( currency_valueTextBox, "The field currency_value is required" ); 
			}
			double v;
			string s = currency_valueTextBox.Text;
			if( !double.TryParse( s, out v ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( currency_valueTextBox, "The field currency_value must be double." );
			}
			if( !e.Cancel ) { errorProvider1.SetError( currency_valueTextBox, "" ); } 
		}
		
		private void ipTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( ipTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( ipTextBox, "The field ip is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( ipTextBox, "" ); } 
		}
		
		private void forwarded_ipTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( forwarded_ipTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( forwarded_ipTextBox, "The field forwarded_ip is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( forwarded_ipTextBox, "" ); } 
		}
		
		private void user_agentTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( user_agentTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( user_agentTextBox, "The field user_agent is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( user_agentTextBox, "" ); } 
		}
		
		private void accept_languageTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( accept_languageTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( accept_languageTextBox, "The field accept_language is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( accept_languageTextBox, "" ); } 
		}
		
		
		
		
		private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
		{
			oc_orderBindingSource.AddNew();
		}
	}
}
